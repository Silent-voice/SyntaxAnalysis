line: 1
CONSTSYM const
INTSYM int
IDENT num1
EQL =
NUMBER 1
COMMA ,
IDENT num_2
EQL =
NUMBER -2
COMMA ,
IDENT num_0
EQL =
NUMBER 0
SEMICOLON ;
line: 2
CONSTSYM const
INTSYM int
IDENT num_a
EQL =
NUMBER 0
SEMICOLON ;
line: 3
CONSTSYM const
CHARSYM char
IDENT ch_a
EQL =
CHAR 'a'
COMMA ,
IDENT ch_0
EQL =
CHAR '0'
COMMA ,
IDENT ch__
EQL =
CHAR '_'
COMMA ,
IDENT ch_star
EQL =
CHAR '*'
COMMA ,
IDENT ch_plus
EQL =
CHAR '-'
SEMICOLON ;
line: 4
CONSTSYM const
CHARSYM char
IDENT ch_b
EQL =
CHAR 'B'
SEMICOLON ;
line: 5
line: 6
INTSYM int
IDENT num3
COMMA ,
IDENT num4
COMMA ,
IDENT num_arry1
LBRACK [
NUMBER 3
RBRACK ]
SEMICOLON ;
line: 7
INTSYM int
IDENT num5
SEMICOLON ;
line: 8
line: 9
CHARSYM char
IDENT ch_c
COMMA ,
IDENT ch_d
COMMA ,
IDENT ch2
COMMA ,
IDENT ch_arry1
LBRACK [
NUMBER 2
RBRACK ]
SEMICOLON ;
line: 10
CHARSYM char
IDENT ch_minus
SEMICOLON ;
line: 11
line: 12
VOIDSYM void
IDENT v_func_add
LPAREN (
INTSYM int
IDENT x
RPAREN )
LBRACE {
line: 13
IDENT x
EQL =
IDENT x
PLUS +
NUMBER 1
SEMICOLON ;
line: 14
PRINTFSYM printf
LPAREN (
STRING "x+1="
COMMA ,
IDENT x
RPAREN )
SEMICOLON ;
line: 15
RBRACE }
line: 16
VOIDSYM void
IDENT v_func_ret
LPAREN (
RPAREN )
LBRACE {
line: 17
PRINTFSYM printf
LPAREN (
STRING "void return check ok"
RPAREN )
SEMICOLON ;
line: 18
RETURNSYM return
SEMICOLON ;
line: 19
PRINTFSYM printf
LPAREN (
STRING "failed"
RPAREN )
SEMICOLON ;
line: 20
RBRACE }
line: 21
INTSYM int
IDENT i_func_return_1
LPAREN (
RPAREN )
LBRACE {
line: 22
RETURNSYM return
LPAREN (
NUMBER 1
RPAREN )
SEMICOLON ;
line: 23
RBRACE }
line: 24
INTSYM int
IDENT i_func_add
LPAREN (
INTSYM int
IDENT y
RPAREN )
LBRACE {
line: 25
line: 26
RETURNSYM return
LPAREN (
IDENT y
PLUS +
NUMBER 1
RPAREN )
SEMICOLON ;
line: 27
RBRACE }
line: 28
VOIDSYM void
IDENT func_if_cmp
LPAREN (
RPAREN )
LBRACE {
line: 29
IDENT num5
EQL =
NUMBER 1
SEMICOLON ;
line: 30
IFSYM if
LPAREN (
IDENT num5
DEQL ==
NUMBER 2
RPAREN )
LBRACE {
line: 31
PRINTFSYM printf
LPAREN (
STRING "== check failed"
RPAREN )
SEMICOLON ;
line: 32
RBRACE }
line: 33
IDENT num5
EQL =
IDENT i_func_add
LPAREN (
IDENT num5
RPAREN )
SEMICOLON ;
line: 34
IFSYM if
LPAREN (
IDENT num5
DEQL ==
NUMBER 2
RPAREN )
line: 35
PRINTFSYM printf
LPAREN (
STRING "== check ok"
RPAREN )
SEMICOLON ;
line: 36
line: 37
IFSYM if
LPAREN (
IDENT num5
NEQ !=
NUMBER 2
RPAREN )
LBRACE {
line: 38
PRINTFSYM printf
LPAREN (
STRING "!= check failed"
RPAREN )
SEMICOLON ;
line: 39
RBRACE }
line: 40
IDENT num5
EQL =
IDENT i_func_return_1
LPAREN (
RPAREN )
SEMICOLON ;
line: 41
IFSYM if
LPAREN (
IDENT num5
NEQ !=
NUMBER 2
RPAREN )
LBRACE {
line: 42
PRINTFSYM printf
LPAREN (
STRING "return 1 check ok"
RPAREN )
SEMICOLON ;
line: 43
PRINTFSYM printf
LPAREN (
STRING "!= check ok"
RPAREN )
SEMICOLON ;
line: 44
RBRACE }
line: 45
line: 46
IFSYM if
LPAREN (
IDENT num5
GTR >
NUMBER 5
RPAREN )
LBRACE {
line: 47
SEMICOLON ;
line: 48
PRINTFSYM printf
LPAREN (
STRING "> check failed"
RPAREN )
SEMICOLON ;
line: 49
RBRACE }
ELSESYM else
LBRACE {
line: 50
PRINTFSYM printf
LPAREN (
STRING "else check ok"
RPAREN )
SEMICOLON ;
line: 51
PRINTFSYM printf
LPAREN (
STRING "> check ok"
RPAREN )
SEMICOLON ;
line: 52
RBRACE }
line: 53
IDENT num5
EQL =
NUMBER 5
SEMICOLON ;
line: 54
IFSYM if
LPAREN (
IDENT num5
LSS <
NUMBER 5
RPAREN )
LBRACE {
line: 55
PRINTFSYM printf
LPAREN (
STRING "< check failed"
RPAREN )
SEMICOLON ;
line: 56
RBRACE }
line: 57
ELSESYM else
PRINTFSYM printf
LPAREN (
STRING "< check ok"
RPAREN )
SEMICOLON ;
line: 58
IDENT num5
EQL =
NUMBER 4
SEMICOLON ;
line: 59
IFSYM if
LPAREN (
IDENT num5
GEQ >=
NUMBER 5
RPAREN )
LBRACE {
line: 60
PRINTFSYM printf
LPAREN (
STRING ">= check failed"
RPAREN )
SEMICOLON ;
line: 61
RBRACE }
line: 62
IDENT num5
EQL =
NUMBER 5
SEMICOLON ;
line: 63
IFSYM if
LPAREN (
IDENT num5
GEQ >=
NUMBER 5
RPAREN )
LBRACE {
line: 64
PRINTFSYM printf
LPAREN (
STRING "5>=5 check ok"
RPAREN )
SEMICOLON ;
line: 65
RBRACE }
line: 66
IDENT num5
EQL =
NUMBER 6
SEMICOLON ;
line: 67
IFSYM if
LPAREN (
IDENT num5
GEQ >=
NUMBER 5
RPAREN )
LBRACE {
line: 68
PRINTFSYM printf
LPAREN (
STRING "6>=5 check ok"
RPAREN )
SEMICOLON ;
line: 69
RBRACE }
line: 70
IDENT num5
EQL =
NUMBER 6
SEMICOLON ;
line: 71
IFSYM if
LPAREN (
IDENT num5
LEQ <=
NUMBER 5
RPAREN )
LBRACE {
line: 72
PRINTFSYM printf
LPAREN (
STRING "<= check failed"
RPAREN )
SEMICOLON ;
line: 73
line: 74
RBRACE }
line: 75
IDENT num5
EQL =
NUMBER 5
SEMICOLON ;
line: 76
IFSYM if
LPAREN (
IDENT num5
LEQ <=
NUMBER 5
RPAREN )
LBRACE {
line: 77
PRINTFSYM printf
LPAREN (
STRING "5<=5 check ok"
RPAREN )
SEMICOLON ;
line: 78
RBRACE }
line: 79
IDENT num5
EQL =
NUMBER 4
SEMICOLON ;
line: 80
IFSYM if
LPAREN (
IDENT num5
LEQ <=
NUMBER 5
RPAREN )
LBRACE {
line: 81
PRINTFSYM printf
LPAREN (
STRING "4<=5 check ok"
RPAREN )
SEMICOLON ;
line: 82
RBRACE }
line: 83
IFSYM if
LPAREN (
IDENT num5
LEQ <=
NUMBER 10
RPAREN )
LBRACE {
line: 84
IFSYM if
LPAREN (
IDENT num5
NEQ !=
NUMBER 9
RPAREN )
LBRACE {
line: 85
IFSYM if
LPAREN (
IDENT num5
DEQL ==
NUMBER 4
RPAREN )
LBRACE {
line: 86
PRINTFSYM printf
LPAREN (
STRING "multiple if check ok"
RPAREN )
SEMICOLON ;
line: 87
RBRACE }
line: 88
ELSESYM else
PRINTFSYM printf
LPAREN (
STRING "multiple if check failed1"
RPAREN )
SEMICOLON ;
line: 89
RBRACE }
ELSESYM else
PRINTFSYM printf
LPAREN (
STRING "multiple if check failed2"
RPAREN )
SEMICOLON ;
line: 90
RBRACE }
ELSESYM else
PRINTFSYM printf
LPAREN (
STRING "multiple if check failed3"
RPAREN )
SEMICOLON ;
line: 91
RBRACE }
line: 92
VOIDSYM void
IDENT func_while
LPAREN (
RPAREN )
LBRACE {
line: 93
CONSTSYM const
INTSYM int
IDENT len
EQL =
NUMBER 3
SEMICOLON ;
line: 94
IDENT num5
EQL =
NUMBER 0
SEMICOLON ;
line: 95
WHILESYM while
LPAREN (
IDENT num5
LSS <
IDENT len
RPAREN )
LBRACE {
line: 96
PRINTFSYM printf
LPAREN (
STRING "while for 3 times"
RPAREN )
SEMICOLON ;
line: 97
IDENT num5
EQL =
IDENT num5
PLUS +
NUMBER 1
SEMICOLON ;
line: 98
RBRACE }
line: 99
WHILESYM while
LPAREN (
IDENT num5
GTR >
NUMBER 0
RPAREN )
LBRACE {
line: 100
IFSYM if
LPAREN (
IDENT num5
GTR >
NUMBER 0
RPAREN )
line: 101
PRINTFSYM printf
LPAREN (
STRING "while if num5 > 0 for 3 times"
RPAREN )
SEMICOLON ;
line: 102
IDENT num5
EQL =
IDENT num5
MINUS -
NUMBER 1
SEMICOLON ;
line: 103
RBRACE }
line: 104
RBRACE }
line: 105
VOIDSYM void
IDENT func_switch
LPAREN (
RPAREN )
LBRACE {
line: 106
INTSYM int
IDENT len
SEMICOLON ;
line: 107
CHARSYM char
IDENT str
LBRACK [
NUMBER 10
RBRACK ]
SEMICOLON ;
line: 108
INTSYM int
IDENT cnt
SEMICOLON ;
line: 109
IDENT num5
EQL =
NUMBER 1
SEMICOLON ;
line: 110
PRINTFSYM printf
LPAREN (
STRING "number 1 switch check"
RPAREN )
SEMICOLON ;
line: 111
SWITCHSYM switch
LPAREN (
IDENT num5
RPAREN )
LBRACE {
line: 112
CASESYM case
NUMBER 1
COLON :
line: 113
PRINTFSYM printf
LPAREN (
STRING "match check ok"
RPAREN )
SEMICOLON ;
line: 114
CASESYM case
NUMBER 2
COLON :
line: 115
PRINTFSYM printf
LPAREN (
STRING "check failed at "
COMMA ,
NUMBER 2
RPAREN )
SEMICOLON ;
line: 116
CASESYM case
NUMBER 3
COLON :
line: 117
PRINTFSYM printf
LPAREN (
STRING "check failed at "
COMMA ,
NUMBER 3
RPAREN )
SEMICOLON ;
line: 118
RBRACE }
line: 119
line: 120
IDENT num5
EQL =
NUMBER 2
SEMICOLON ;
line: 121
PRINTFSYM printf
LPAREN (
STRING "number 1 switch check"
RPAREN )
SEMICOLON ;
line: 122
SWITCHSYM switch
LPAREN (
IDENT num5
RPAREN )
LBRACE {
line: 123
CASESYM case
NUMBER 1
COLON :
line: 124
PRINTFSYM printf
LPAREN (
STRING "check failed at "
COMMA ,
NUMBER 1
RPAREN )
SEMICOLON ;
line: 125
CASESYM case
NUMBER 2
COLON :
LBRACE {
line: 126
PRINTFSYM printf
LPAREN (
STRING "match check ok"
RPAREN )
SEMICOLON ;
line: 127
PRINTFSYM printf
LPAREN (
STRING "multiple switch statement check ok"
RPAREN )
SEMICOLON ;
line: 128
RBRACE }
line: 129
CASESYM case
NUMBER 3
COLON :
line: 130
PRINTFSYM printf
LPAREN (
STRING "check failed at "
COMMA ,
NUMBER 3
RPAREN )
SEMICOLON ;
line: 131
RBRACE }
line: 132
line: 133
IDENT num5
EQL =
NUMBER -1
SEMICOLON ;
line: 134
PRINTFSYM printf
LPAREN (
STRING "default check"
RPAREN )
SEMICOLON ;
line: 135
SWITCHSYM switch
LPAREN (
IDENT num5
RPAREN )
LBRACE {
line: 136
CASESYM case
NUMBER 1
COLON :
line: 137
PRINTFSYM printf
LPAREN (
STRING "check failed at "
COMMA ,
NUMBER 1
RPAREN )
SEMICOLON ;
line: 138
CASESYM case
NUMBER 2
COLON :
line: 139
PRINTFSYM printf
LPAREN (
STRING "match check ok"
RPAREN )
SEMICOLON ;
line: 140
CASESYM case
NUMBER 3
COLON :
line: 141
PRINTFSYM printf
LPAREN (
STRING "check failed at "
COMMA ,
NUMBER 3
RPAREN )
SEMICOLON ;
line: 142
DEFAULTSYM default
COLON :
line: 143
PRINTFSYM printf
LPAREN (
STRING "default check ok"
RPAREN )
SEMICOLON ;
line: 144
RBRACE }
line: 145
line: 146
IDENT ch_c
EQL =
CHAR 'c'
SEMICOLON ;
line: 147
PRINTFSYM printf
LPAREN (
STRING "char switch check "
RPAREN )
SEMICOLON ;
line: 148
SWITCHSYM switch
LPAREN (
IDENT ch_c
RPAREN )
LBRACE {
line: 149
CASESYM case
CHAR 'a'
COLON :
line: 150
PRINTFSYM printf
LPAREN (
STRING "check failed at "
COMMA ,
NUMBER 1
RPAREN )
SEMICOLON ;
line: 151
CASESYM case
CHAR 'b'
COLON :
line: 152
PRINTFSYM printf
LPAREN (
STRING "check failed at "
COMMA ,
NUMBER 2
RPAREN )
SEMICOLON ;
line: 153
CASESYM case
CHAR 'c'
COLON :
line: 154
PRINTFSYM printf
LPAREN (
STRING "match check ok"
RPAREN )
SEMICOLON ;
line: 155
RBRACE }
line: 156
PRINTFSYM printf
LPAREN (
STRING "check while switch:"
RPAREN )
SEMICOLON ;
line: 157
PRINTFSYM printf
LPAREN (
STRING "enter length of string(1-10):"
RPAREN )
SEMICOLON ;
line: 158
SCANFSYM scanf
LPAREN (
IDENT len
RPAREN )
SEMICOLON ;
line: 159
IDENT num5
EQL =
NUMBER 0
SEMICOLON ;
line: 160
WHILESYM while
LPAREN (
IDENT num5
LSS <
IDENT len
RPAREN )
LBRACE {
line: 161
PRINTFSYM printf
LPAREN (
STRING "enter a letter:"
RPAREN )
SEMICOLON ;
line: 162
SCANFSYM scanf
LPAREN (
IDENT ch2
RPAREN )
SEMICOLON ;
line: 163
IDENT str
LBRACK [
IDENT num5
RBRACK ]
EQL =
IDENT ch2
SEMICOLON ;
line: 164
IDENT num5
EQL =
IDENT num5
PLUS +
NUMBER 1
SEMICOLON ;
line: 165
RBRACE }
line: 166
IDENT num5
EQL =
NUMBER 0
SEMICOLON ;
line: 167
IDENT cnt
EQL =
NUMBER 0
SEMICOLON ;
line: 168
WHILESYM while
LPAREN (
IDENT num5
LSS <
IDENT len
RPAREN )
LBRACE {
line: 169
SWITCHSYM switch
LPAREN (
IDENT str
LBRACK [
IDENT num5
RBRACK ]
RPAREN )
LBRACE {
line: 170
CASESYM case
CHAR 'a'
COLON :
line: 171
IDENT cnt
EQL =
IDENT cnt
PLUS +
NUMBER 1
SEMICOLON ;
line: 172
CASESYM case
CHAR 'e'
COLON :
line: 173
IDENT cnt
EQL =
IDENT cnt
PLUS +
NUMBER 1
SEMICOLON ;
line: 174
CASESYM case
CHAR 'i'
COLON :
line: 175
IDENT cnt
EQL =
IDENT cnt
PLUS +
NUMBER 1
SEMICOLON ;
line: 176
CASESYM case
CHAR 'o'
COLON :
line: 177
IDENT cnt
EQL =
IDENT cnt
PLUS +
NUMBER 1
SEMICOLON ;
line: 178
CASESYM case
CHAR 'u'
COLON :
line: 179
IDENT cnt
EQL =
IDENT cnt
PLUS +
NUMBER 1
SEMICOLON ;
line: 180
RBRACE }
line: 181
IDENT num5
EQL =
IDENT num5
PLUS +
NUMBER 1
SEMICOLON ;
line: 182
RBRACE }
line: 183
PRINTFSYM printf
LPAREN (
STRING "cnt="
COMMA ,
IDENT cnt
RPAREN )
SEMICOLON ;
line: 184
RBRACE }
line: 185
VOIDSYM void
IDENT i_func_calc
LPAREN (
INTSYM int
IDENT a
COMMA ,
INTSYM int
IDENT b
RPAREN )
LBRACE {
line: 186
CONSTSYM const
INTSYM int
IDENT c
EQL =
NUMBER 100
SEMICOLON ;
line: 187
INTSYM int
IDENT ans
SEMICOLON ;
line: 188
IDENT num3
EQL =
NUMBER 100
SEMICOLON ;
line: 189
IDENT ans
EQL =
IDENT a
MINUS -
IDENT b
PLUS +
IDENT c
MULT *
IDENT num_2
PLUS +
IDENT num3
SEMICOLON ;
line: 190
PRINTFSYM printf
LPAREN (
STRING "simple expression"
RPAREN )
SEMICOLON ;
line: 191
PRINTFSYM printf
LPAREN (
STRING "ans = a - b + 100 * -2 + num3 = "
COMMA ,
IDENT ans
RPAREN )
SEMICOLON ;
line: 192
PRINTFSYM printf
LPAREN (
STRING "complex expression:"
RPAREN )
SEMICOLON ;
line: 193
PRINTFSYM printf
LPAREN (
STRING "3a-50="
RPAREN )
SEMICOLON ;
line: 194
PRINTFSYM printf
LPAREN (
LPAREN (
IDENT num1
MINUS -
IDENT num_2
RPAREN )
MULT *
IDENT a
PLUS +
LPAREN (
IDENT num_0
DIV /
IDENT b
PLUS +
LPAREN (
IDENT num_0
MULT *
NUMBER 5
MINUS -
LPAREN (
IDENT c
DIV /
IDENT i_func_add
LPAREN (
IDENT num1
RPAREN )
RPAREN )
RPAREN )
RPAREN )
RPAREN )
SEMICOLON ;
line: 195
RBRACE }
line: 196
CHARSYM char
IDENT c_func_return_d
LPAREN (
RPAREN )
LBRACE {
line: 197
PRINTFSYM printf
LPAREN (
STRING "return 'd'"
RPAREN )
SEMICOLON ;
line: 198
RETURNSYM return
LPAREN (
CHAR 'c'
PLUS +
NUMBER 1
RPAREN )
SEMICOLON ;
line: 199
RBRACE }
line: 200
CHARSYM char
IDENT c_func_ch_calc
LPAREN (
CHARSYM char
IDENT ch
COMMA ,
INTSYM int
IDENT n
RPAREN )
LBRACE {
line: 201
CHARSYM char
IDENT t
SEMICOLON ;
line: 202
IDENT n
EQL =
NUMBER 1
SEMICOLON ;
line: 203
IDENT t
EQL =
IDENT ch
PLUS +
IDENT n
SEMICOLON ;
line: 204
PRINTFSYM printf
LPAREN (
STRING "ch+1="
COMMA ,
IDENT t
RPAREN )
SEMICOLON ;
line: 205
RETURNSYM return
LPAREN (
IDENT t
RPAREN )
SEMICOLON ;
line: 206
RBRACE }
line: 207
INTSYM int
IDENT power
LPAREN (
INTSYM int
IDENT a
COMMA ,
INTSYM int
IDENT b
RPAREN )
LBRACE {
line: 208
INTSYM int
IDENT t
SEMICOLON ;
line: 209
IDENT t
EQL =
IDENT a
SEMICOLON ;
line: 210
IFSYM if
LPAREN (
IDENT b
DEQL ==
NUMBER 1
RPAREN )
line: 211
RETURNSYM return
LPAREN (
IDENT a
RPAREN )
SEMICOLON ;
line: 212
IDENT t
EQL =
IDENT t
MULT *
IDENT power
LPAREN (
IDENT a
COMMA ,
IDENT b
MINUS -
NUMBER 1
RPAREN )
SEMICOLON ;
line: 213
RETURNSYM return
LPAREN (
IDENT t
RPAREN )
SEMICOLON ;
line: 214
RBRACE }
line: 215
VOIDSYM void
MAINSYM main
LPAREN (
RPAREN )
LBRACE {
line: 216
CONSTSYM const
INTSYM int
IDENT m
EQL =
NUMBER 0
SEMICOLON ;
line: 217
INTSYM int
IDENT n
SEMICOLON ;
line: 218
line: 219
IDENT v_func_add
LPAREN (
IDENT m
RPAREN )
SEMICOLON ;
line: 220
IDENT v_func_ret
LPAREN (
RPAREN )
SEMICOLON ;
line: 221
line: 222
PRINTFSYM printf
LPAREN (
STRING "return 1 check"
RPAREN )
SEMICOLON ;
line: 223
IDENT n
EQL =
IDENT i_func_return_1
LPAREN (
RPAREN )
SEMICOLON ;
line: 224
IFSYM if
LPAREN (
IDENT n
DEQL ==
NUMBER 1
RPAREN )
line: 225
PRINTFSYM printf
LPAREN (
STRING "ok"
RPAREN )
SEMICOLON ;
line: 226
line: 227
IDENT n
EQL =
NUMBER 3
SEMICOLON ;
line: 228
IDENT i_func_calc
LPAREN (
IDENT num_2
COMMA ,
IDENT n
RPAREN )
SEMICOLON ;
line: 229
line: 230
PRINTFSYM printf
LPAREN (
IDENT c_func_return_d
LPAREN (
RPAREN )
RPAREN )
SEMICOLON ;
line: 231
line: 232
SCANFSYM scanf
LPAREN (
IDENT ch_c
RPAREN )
SEMICOLON ;
line: 233
PRINTFSYM printf
LPAREN (
IDENT c_func_ch_calc
LPAREN (
IDENT ch_c
COMMA ,
IDENT num3
RPAREN )
RPAREN )
SEMICOLON ;
line: 234
line: 235
IDENT func_if_cmp
LPAREN (
RPAREN )
SEMICOLON ;
line: 236
line: 237
IDENT func_while
LPAREN (
RPAREN )
SEMICOLON ;
line: 238
line: 239
IDENT func_switch
LPAREN (
RPAREN )
SEMICOLON ;
line: 240
line: 241
PRINTFSYM printf
LPAREN (
STRING "check power:"
RPAREN )
SEMICOLON ;
line: 242
PRINTFSYM printf
LPAREN (
STRING "-5^3="
COMMA ,
IDENT power
LPAREN (
NUMBER -5
COMMA ,
NUMBER 3
RPAREN )
RPAREN )
SEMICOLON ;
line: 243
line: 244
RBRACE }
