关键技术点介绍(闹钟部分)
1。TimePicker与Calendar
使用TimePickerDialog()调用手机自带的时钟控件，并在用户选择好时间之后将结果传回。
创建一个Calendar对象，根据TimePickerDialog()返回的结果设置时间，并通过Calendar.getTimeInMillis()方法获取以毫秒为单位的时间。

2. AlarmManager
通过一个AlarmManager对象获取系统闹钟服务，并根据之前获取的以毫秒为单位的时间设置闹钟事件。
闹钟事件可以设置响铃间隔以及在响铃时调用相应类展示不同的效果。

3. Vibrator和MediaPlayer
Vibrator是一个振动器，用来在闹钟触发时振动，可以设置振动频率等。
MediaPlayer是播放器，用来在闹钟触发时播放闹铃。
这两个都是在闹钟触发时触发，退出响铃页面时关闭。

4. AlarmData
AlarmData是自己写的封装类，封装以毫秒为单位的时间。类中保存着一个闹钟的各种信息，包括以毫秒为单位的时间，以月日时分显示的时间以及闹钟的响铃属性等。

5. ArrayAdapter
ArrayAdapter是一个适配器，每一项都是一个AlarmData，将闹钟列表展示给用户。

6. ListView
ListView是一个列表，以上述ArrayAdapter<AlarmData>对象为适配器，并通过ListView.setOnItemLongClickListener()方法提供给用户修改适配器中闹钟信息的功能。


7. SharedPreferences和Editor
轻量级存储类，存储适配器中的闹钟信息，提供保存和获取历史数据的功能，以免关闭软件后之前的记录被清空。


运行流程(闹钟部分)
添加闹钟：
1. 点击添加按钮，调用手机自带时钟控件，获取用户设置的时间。
2. 对时间进行处理，设置闹钟事件，并将其加入到适配器中。
3. 将适配器中的数据存入存储类中，然后再从存储类中获取数据，更新适配器。

修改闹钟：
1. 长按选中闹钟，选择相应操作。
2. 根据闹钟在适配器中的下标和操作类型修改适配器中相应闹钟的属性，删除原有闹钟事件，重新设置闹钟事件，更新适配器。
3. 将适配器中的数据存入存储类中，然后再从存储类中获取数据，再次更新适配器。

删除闹钟：
1. 长按选中闹钟，选择相应操作。
2. 将闹钟事件删除，同时从适配器中删除相应记录。
3. 将适配器中的数据存入存储类中，然后再从存储类中获取数据，再次更新适配器。

闹钟触发：
1. 执行触发类AlarmReceiver.class跳到响铃界面。
2. 开启振动和响铃，并在退出时关闭。
3. 删除相应的闹钟事件。
4. 检查适配器中的闹钟，如果响铃是每天都响，而且闹钟时间小于当前时间，那么闹钟时间加1天，更新适配器并设置闹钟事件。
5. 将适配器中的数据存入存储类中，然后再从存储类中获取数据，再次更新适配器。